Developed by Malkovskii Nikolai, 2015-2016.

==================================================================
Overview.
==================================================================

This repository contains a simulator modelling the
behaviour of the computation network system as well
as some algorithms for load balancing in the network.
The main purpose of the simulator is to test various
approaches for load balancing in physically distributed
networks. It is assumed that in such networks, optimal
processes are heavily influenced by capacities of
communication channels.

==================================================================
Simulator description.
==================================================================

Simulator time is discrete with equal time quants (time units) 
generated by tick() function, base network model is contained 
in simulator.h and consists of
-- Processing nodes: these objects represents nodes
	network and can process tasks. Each node has a local storage
	in its disposal. Main characteristic of the processing node
	is its performance -- number of elementary computation 
	actions the node performs each time unit.
-- Comunication channels: any communication channel links
	two processing nodes with each other. One of these nodes
	can send data to another. Main characteristic of the channel
	is its capacity -- the number of bits that can be sent
	via the channel per time unit.
-- Tasks: each task is initially assigned to some node and
	is stored in corresponding local storage of this node.
	Each task has two charachteristics. "Context size" -- 
	the number of bits to be transferred if the task is to be
	sent to the neighbouring node; "complexity" -- the number
	elementary operations needed to precess the task.
-- Schedulers: each node has his own scheduler that is
	responsible for local scheduling of the tasks (if the task
	is to be sent away from the node, scheduler decides
	which communication channel should be used to sent the
	task away). Thus, schedulers take care of local scheduling 
	rules.


General problem of load balancing is to decide for each task
whether it should be processed by the current node or to be sent 
to some of the nodes neighbour.

==================================================================
Algorithims.
==================================================================
Currently two algorithms are implemented:
-- Parametric flow approach that precalculates for each channel the 
amount of load that have to be sent via the channel. This values
are described as a network flow and the optimal set of values is
achieved by solving corresponding parametric flow problem.
For details, see 
Malkovskii Nikolai, Optimal static network load balancing using
parametric flow approach // proc. of MICNON'2016 

-- Another algorithm in use is a consensus-based protocol. At each
simulator tact for each communication channel (i, j) we 
send min(capacity(i, j), alpha * (queue size(i) / performance(i)
- queue size(j) / performance(j)) from the node with the higher 
load to the node with the lower load. For details see
Amelina N. et al. Approximate consensus in stochastic networks with 
application to load balancing //Information Theory, IEEE Transactions on. 
– 2015. – T. 61. – No. 4. – p. 1739-1752.

==================================================================
Compilation
==================================================================
For compilation execute
>make all

Currently, gcc on Linux or MinGW/Cygwin on Windows is required to
build the project. Other C++ compilers may be used (not tested).
 

==================================================================
Launching the simulator
==================================================================
Currently, simulator runs on examples written in "tests/". To launch
execute
>run <test name>

==================================================================
Input specification
==================================================================
Tests input have a following format
n m
p_1 q_1
p_2 q_2
....
p_n q_n
u_1 v_1 cap_1
u_2 v_2 cap_2
....
u_m v_m cap_m

Where
-- n is the number of network computation nodes.
-- m is the number of unidirectional channels between the nodes.
-- p_i -- performance of th i-th node, the number of tasks that
	the node can resolve in a time unit.
-- q_i -- initial number of tasks assigned to i-th node.
-- u_i, v_i, cap_i -- i-th communication channel description:
	node u_i can sent data to v_i but no more than cap_i
	bits per time unit.

The rest is specified in settings.cfg file.

==================================================================
Settings file
==================================================================
File settings.cfg contains over simulation configuration. Options are

--balancing_algorithm: specifies used balancing algorithm. Possible values
	parametric_flow, consensus
--consensus_step: specifies step size of a consensus. Any positive
	real value is valid. Recommended value is 1. 
--task_processing_time_expectation: specifies the average number
	of operations processing node used to perform a task. For each
	task actual number of required operations is generated 
	seperately for each task. Distribution is uniform integer on
	an interval. Have to be a positive average value.
--task_processing_time_variance: specifies the size of an interval.
	the size of the interval is double the value + 1 with center in
	task_processing_time_expectation. Have to be positive integer value.
--task_content_size_expectation: specifies the size of the context of
	task, that is the number of bits to be transferred if the task is to
	be send via communicaation channel. The rest is the same as for
	processing time.		
--task_content_size_variance: the same as for processing time.
--log_level: specifies the amount of output log. Recommended value is 2.
	Can take values 0, 1, 2, 3, 4. No log is outputted for 0 and full
	log is outputted for 4.
--time_output_step: specifies the log skip step for simulation. Value
	of 1 means that during simulation there will be a log message for
	the current state of the network.





